#!/usr/bin/env python

def options(opt):
	opt.add_option('--linuxdir', help='Directory to Linux kernel which has had \'make modules_prepare\' run.')
	opt.add_option('--linuxargs', help='Extra options to pass to the Linux kernel module build system.')

def configure(conf):
	conf.env.LINUXDIR = conf.options.linuxdir
	conf.env.LINUXARGS = conf.options.linuxargs

def build(bld):
	includes = [
		'.',
		'../include',
		'../../include',
		'../../include/%s' % bld.env.OS,
		'../include/arch/%s' % bld.env.ARCH,
	]

	sources = [
		'shm.c'
	]

	extra_sources = {
		'linux': ['linux/shm_os.c'],
	}

	sources += extra_sources.get(bld.env.OS, [])

	bld.stlib(
		target='mcapi_shm',
		source=' '.join(sources),

		includes=' '.join(includes),
		cflags='-O2 -Wall',
	)

def makeopts(bld):
	'''Assemble the options to pass to Kbuild.'''

	# So we can access bld.env.LINUXDIR et al.
	if not bld.all_envs:
		bld.load_envs()

	# XXX figure out how not to hardcode the paths
	makeopts = [
		'-C %s/libmcapi/shm/linux/kmod' % bld.path.abspath(),
		'ARCH=%s' % bld.env.ARCH,
		'INSTALL_MOD_PATH=%s/libmcapi/shm/linux/kmod/deploy' % bld.out_dir,
	]
	if bld.env.LINUXDIR:
		makeopts.append('KERNELDIR=%s' % bld.env.LINUXDIR)
	if bld.env.CROSS:
		makeopts.append('CROSS_COMPILE=%s' % bld.env.CROSS)
	if bld.env.LINUXARGS:
		makeopts.append(bld.env.LINUXARGS)

	return ' '.join(makeopts)

# Below here lies magic to make the Linux kmod build automatically:

from waflib.Build import BuildContext, InstallContext, UninstallContext, CleanContext

class _build(BuildContext):
	def compile(self):
		ret = self.exec_command('make %s modules modules_install' % makeopts(self))
		if ret:
			self.fatal('make returned %r' % ret)
		super(_build, self).compile()

class _clean(CleanContext):
	def clean(self):
		self.exec_command('make %s clean' % makeopts(self))
		super(_clean, self).clean()

class _install(InstallContext):
	def compile(self):
		ret = self.exec_command('make %s modules_install' % makeopts(self))
		if ret:
			self.fatal('make install returned %r' % ret)
		super(_install, self).compile()
