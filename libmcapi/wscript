#!/usr/bin/env python

subdirs = ['shm']

def options(opt):
	opt.recurse(subdirs)

def configure(conf):
	conf.recurse(subdirs)

def build(bld):
	bld.recurse(subdirs)

	includes = [
		'../include',
		'../include/%s' % bld.env.OS,
		'include',
	]

	sources = [
		'mcapi_cfg.c',
		'mcapi/buf_mgmt.c',
		'mcapi/cntrl_msg.c',
		'mcapi/connect.c',
		'mcapi/create_endpoint.c',
		'mcapi/data_avail.c',
		'mcapi/data_count.c',
		'mcapi/endpoint.c',
		'mcapi/forward.c',
		'mcapi/get_endp.c',
		'mcapi/handle.c',
		'mcapi/interface.c',
		'mcapi/loopback.c',
		'mcapi/mcapi_cancel.c',
		'mcapi/mcapi_connect_pktchan_i.c',
		'mcapi/mcapi_connect_sclchan_i.c',
		'mcapi/mcapi_create_endp.c',
		'mcapi/mcapi_delete_endp.c',
		'mcapi/mcapi_finalize.c',
		'mcapi/mcapi_get_endp_attrib.c',
		'mcapi/mcapi_get_endp_i.c',
		'mcapi/mcapi_get_endp.c',
		'mcapi/mcapi_get_node_id.c',
		'mcapi/mcapi_init.c',
		'mcapi/mcapi_msg_avail.c',
		'mcapi/mcapi_msg_rcv_i.c',
		'mcapi/mcapi_msg_rcv.c',
		'mcapi/mcapi_msg_snd_i.c',
		'mcapi/mcapi_msg_snd.c',
		'mcapi/mcapi_open_pktchan_rcv_i.c',
		'mcapi/mcapi_open_pktchan_snd_i.c',
		'mcapi/mcapi_open_sclchan_rcv_i.c',
		'mcapi/mcapi_open_sclchan_snd_i.c',
		'mcapi/mcapi_pktchan_avail.c',
		'mcapi/mcapi_pktchan_free.c',
		'mcapi/mcapi_pktchan_rcv_close_i.c',
		'mcapi/mcapi_pktchan_rcv_i.c',
		'mcapi/mcapi_pktchan_rcv.c',
		'mcapi/mcapi_pktchan_snd_close_i.c',
		'mcapi/mcapi_pktchan_snd_i.c',
		'mcapi/mcapi_pktchan_snd.c',
		'mcapi/mcapi_sclchan_avail.c',
		'mcapi/mcapi_sclchan_rcv_close_i.c',
		'mcapi/mcapi_sclchan_rcv_u16.c',
		'mcapi/mcapi_sclchan_rcv_u32.c',
		'mcapi/mcapi_sclchan_rcv_u64.c',
		'mcapi/mcapi_sclchan_rcv_u8.c',
		'mcapi/mcapi_sclchan_snd_close_i.c',
		'mcapi/mcapi_sclchan_snd_u16.c',
		'mcapi/mcapi_sclchan_snd_u32.c',
		'mcapi/mcapi_sclchan_snd_u64.c',
		'mcapi/mcapi_sclchan_snd_u8.c',
		'mcapi/mcapi_set_endp_attrib.c',
		'mcapi/mcapi_test.c',
		'mcapi/mcapi_wait_any.c',
		'mcapi/mcapi_wait.c',
		'mcapi/msg_rcv.c',
		'mcapi/msg_snd.c',
		'mcapi/node_data.c',
		'mcapi/node.c',
		'mcapi/pkt_rcv.c',
		'mcapi/pkt_snd.c',
		'mcapi/queue.c',
		'mcapi/request.c',
		'mcapi/route.c',
		'mcapi/scal_rcv.c',
		'mcapi/scal_snd.c',
		'mcapi/suspend.c',
		'mcapi/mcapi_tls.c',
	]

	extra_sources = {
		'linux': ['mcapi/linux/mcapi_os.c'],
	}

	sources += extra_sources.get(bld.env.OS, [])

	bld.stlib(
		target='mcapi',
		source=' '.join(sources),

		includes=' '.join(includes),
		cflags='-O2 -Wall',

		use='mcapi_shm',
	)

